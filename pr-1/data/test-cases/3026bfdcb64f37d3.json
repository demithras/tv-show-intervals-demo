{"uid":"3026bfdcb64f37d3","name":"Very long overnight program - almost full day","fullName":"features/tv_intervals.feature:Very long overnight program - almost full day","historyId":"76bad77e5c86542987ae3c50fc64e0a7.d41d8cd98f00b204e9800998ecf8427e","time":{"start":1757361256375,"stop":1757361257296,"duration":921},"description":"As a TV scheduling system\nI want to automatically calculate 15-minute intervals for programs\nSo that I can track program duration in standardized time blocks","descriptionHtml":"<p>As a TV scheduling system<br />\nI want to automatically calculate 15-minute intervals for programs<br />\nSo that I can track program duration in standardized time blocks</p>\n","status":"failed","statusMessage":"AssertionError: Expected 95 intervals for 'Almost Full Day', got 102\nassert 102 == 95","statusTrace":"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:930: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\ntest_tv_intervals.py:151: in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\nE   AssertionError: Expected 95 intervals for 'Almost Full Day', got 102\nE   assert 102 == 95","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"As a TV scheduling system\nI want to automatically calculate 15-minute intervals for programs\nSo that I can track program duration in standardized time blocks","status":"failed","statusMessage":"AssertionError: Expected 95 intervals for 'Almost Full Day', got 102\nassert 102 == 95","statusTrace":"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:930: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\ntest_tv_intervals.py:151: in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\nE   AssertionError: Expected 95 intervals for 'Almost Full Day', got 102\nE   assert 102 == 95","steps":[{"name":"Given the database is clean","time":{"start":1757361256375,"stop":1757361256987,"duration":612},"status":"passed","steps":[],"attachments":[{"uid":"436932fb0443ab91","name":"Database State","source":"436932fb0443ab91.txt","type":"text/plain","size":29}],"parameters":[{"name":"clean_database","value":"<cursor object at 0x7feb225a2950; closed: 0>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Given I have a program \"Almost Full Day\" that runs from \"00:01\" to \"00:00\"","time":{"start":1757361256988,"stop":1757361256988,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"d5ece61bae00144","name":"Program Definition","source":"d5ece61bae00144.txt","type":"text/plain","size":48}],"parameters":[{"name":"program_name","value":"'Almost Full Day'"},{"name":"start_time","value":"'00:01'"},{"name":"end_time","value":"'00:00'"},{"name":"test_context","value":"{}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"When I insert the program into the database","time":{"start":1757361256988,"stop":1757361257142,"duration":154},"status":"passed","steps":[],"attachments":[{"uid":"3734fb932e7b293c","name":"Database Operation","source":"3734fb932e7b293c.txt","type":"text/plain","size":25}],"parameters":[{"name":"clean_database","value":"<cursor object at 0x7feb225a2950; closed: 0>"},{"name":"test_context","value":"{'program': {'name': 'Almost Full Day', 'start_time': '00:01', 'end_time': '00:00'}}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Then the program \"Almost Full Day\" should have 95 intervals","time":{"start":1757361257142,"stop":1757361257296,"duration":154},"status":"failed","statusMessage":"AssertionError: Expected 95 intervals for 'Almost Full Day', got 102\nassert 102 == 95\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pytest_bdd/scenario.py\", line 240, in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=context.step_func, request=request, kwargs=kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 930, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/tv-show-intervals-demo/tv-show-intervals-demo/test_tv_intervals.py\", line 151, in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\n","steps":[],"attachments":[{"uid":"fa08c17fe9eb8b46","name":"Interval Verification","source":"fa08c17fe9eb8b46.txt","type":"text/plain","size":49}],"parameters":[{"name":"program_name","value":"'Almost Full Day'"},{"name":"expected_intervals","value":"95"},{"name":"clean_database","value":"<cursor object at 0x7feb225a2950; closed: 0>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2746-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"TV Program 15-Minute Interval Calculation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"8153b8b48aa1d701","status":"passed","time":{"start":1757360833880,"stop":1757360834550,"duration":670}},{"uid":"31c5a683fb9d189a","status":"passed","time":{"start":1757360221586,"stop":1757360222441,"duration":855}}]},"tags":[]},"source":"3026bfdcb64f37d3.json","parameterValues":[]}