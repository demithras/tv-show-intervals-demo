{"uid":"1ffd4c1a7b41a6c5","name":"Large intervals - 6 hour program","fullName":"features/tv_intervals.feature:Large intervals - 6 hour program","historyId":"ea83042a8e3155fe08c51dbbed95b011.d41d8cd98f00b204e9800998ecf8427e","time":{"start":1757361261023,"stop":1757361261944,"duration":921},"description":"As a TV scheduling system\nI want to automatically calculate 15-minute intervals for programs\nSo that I can track program duration in standardized time blocks","descriptionHtml":"<p>As a TV scheduling system<br />\nI want to automatically calculate 15-minute intervals for programs<br />\nSo that I can track program duration in standardized time blocks</p>\n","status":"failed","statusMessage":"AssertionError: Expected 24 intervals for 'Long Movie Block', got 25\nassert 25 == 24","statusTrace":"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:930: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\ntest_tv_intervals.py:151: in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\nE   AssertionError: Expected 24 intervals for 'Long Movie Block', got 25\nE   assert 25 == 24","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"As a TV scheduling system\nI want to automatically calculate 15-minute intervals for programs\nSo that I can track program duration in standardized time blocks","status":"failed","statusMessage":"AssertionError: Expected 24 intervals for 'Long Movie Block', got 25\nassert 25 == 24","statusTrace":"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py:930: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\ntest_tv_intervals.py:151: in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\nE   AssertionError: Expected 24 intervals for 'Long Movie Block', got 25\nE   assert 25 == 24","steps":[{"name":"Given the database is clean","time":{"start":1757361261023,"stop":1757361261635,"duration":612},"status":"passed","steps":[],"attachments":[{"uid":"8a6e8608bcb5b0f5","name":"Database State","source":"8a6e8608bcb5b0f5.txt","type":"text/plain","size":29}],"parameters":[{"name":"clean_database","value":"<cursor object at 0x7feb225a3250; closed: 0>"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Given I have a program \"Long Movie Block\" that runs from \"18:00\" to \"00:00\"","time":{"start":1757361261635,"stop":1757361261635,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"6616a252496fb4ef","name":"Program Definition","source":"6616a252496fb4ef.txt","type":"text/plain","size":49}],"parameters":[{"name":"program_name","value":"'Long Movie Block'"},{"name":"start_time","value":"'18:00'"},{"name":"end_time","value":"'00:00'"},{"name":"test_context","value":"{}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"When I insert the program into the database","time":{"start":1757361261635,"stop":1757361261790,"duration":155},"status":"passed","steps":[],"attachments":[{"uid":"2026589643e3d32b","name":"Database Operation","source":"2026589643e3d32b.txt","type":"text/plain","size":26}],"parameters":[{"name":"clean_database","value":"<cursor object at 0x7feb225a3250; closed: 0>"},{"name":"test_context","value":"{'program': {'name': 'Long Movie Block', 'start_time': '18:00', 'end_time': '00:00'}}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"Then the program \"Long Movie Block\" should have 24 intervals","time":{"start":1757361261790,"stop":1757361261944,"duration":154},"status":"failed","statusMessage":"AssertionError: Expected 24 intervals for 'Long Movie Block', got 25\nassert 25 == 24\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pytest_bdd/scenario.py\", line 240, in _execute_step_function\n    return_value = call_fixture_func(fixturefunc=context.step_func, request=request, kwargs=kwargs)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 930, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/tv-show-intervals-demo/tv-show-intervals-demo/test_tv_intervals.py\", line 151, in check_program_intervals\n    assert actual_intervals == expected_intervals, \\\n","steps":[],"attachments":[{"uid":"291dea1d865c4d38","name":"Interval Verification","source":"291dea1d865c4d38.txt","type":"text/plain","size":49}],"parameters":[{"name":"program_name","value":"'Long Movie Block'"},{"name":"expected_intervals","value":"24"},{"name":"clean_database","value":"<cursor object at 0x7feb225a3250; closed: 0>"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":4,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2746-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"TV Program 15-Minute Interval Calculation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"3117ce00438cc645","status":"passed","time":{"start":1757360837237,"stop":1757360837907,"duration":670}},{"uid":"b27ac558f8594148","status":"passed","time":{"start":1757360225868,"stop":1757360226724,"duration":856}}]},"tags":[]},"source":"1ffd4c1a7b41a6c5.json","parameterValues":[]}