name: PR Database Tests

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run BDD Tests
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Install Allure CLI
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run database migrations
        run: |
          # Apply the schema to the Neon branch database using the full connection URL
          psql "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" -f schema.sql

      - name: Run BDD tests
        env:
          # Use the full database URL for Python connection
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          # Run pytest with BDD tests and generate both JUnit XML and Allure reports
          pytest -v --tb=short \
            --junitxml=test-results.xml \
            --alluredir=allure-results \
            --allure-link-pattern=issue:https://github.com/${{ github.repository }}/issues/{} \
            --allure-link-pattern=test_case:https://github.com/${{ github.repository }}/blob/${{ github.sha }}/features/{}

      - name: Generate Allure Report
        if: always()
        run: |
          # Generate Allure HTML report
          allure generate allure-results --clean -o allure-report
          
          # Add environment information
          cat > allure-report/environment.properties << EOF
          Database.Host=${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          Python.Version=3.11
          Test.Framework=pytest-bdd
          CI.Provider=GitHub Actions
          PR.Number=${{ github.event.number }}
          Branch.Name=${{ github.head_ref }}
          Commit.SHA=${{ github.sha }}
          EOF

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-pr-${{ github.event.number }}
          path: allure-results/
          retention-days: 30

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-pr-${{ github.event.number }}
          path: allure-report/
          retention-days: 30

      - name: Deploy Allure Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: pr-${{ github.event.number }}
          keep_files: true
          force_orphan: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy Allure report for PR #${{ github.event.number }}'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-pr-${{ github.event.number }}
          path: test-results.xml

      - name: Comment test results on PR
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: BDD Test Results
          path: test-results.xml
          reporter: java-junit

      - name: Parse and comment test results with Allure link
        if: always()
        run: |
          if [ -f test-results.xml ]; then
            # Extract test summary from JUnit XML
            TOTAL_TESTS=$(grep -o 'tests="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            FAILURES=$(grep -o 'failures="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            ERRORS=$(grep -o 'errors="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            
            # Set defaults if not found
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            
            PASSED=$((TOTAL_TESTS - FAILURES - ERRORS))
            
            # Determine status
            if [ $FAILURES -gt 0 ] || [ $ERRORS -gt 0 ]; then
              STATUS="‚ùå Tests failed"
              ADDITIONAL_TEXT="Some tests are failing. This might be expected if testing the CI/CD pipeline with intentional failures."
            else
              STATUS="‚úÖ All tests passed"
              ADDITIONAL_TEXT=""
            fi
            
            # GitHub Pages URL for Allure report
            ALLURE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
            
            # Create comment body as JSON for API
            cat > comment-payload.json << EOF
          {
            "body": "## üß™ BDD Test Results\n\n**Summary:**\n- ‚úÖ **Passed:** ${PASSED}\n- ‚ùå **Failed:** ${FAILURES}\n- üî• **Errors:** ${ERRORS}\n- üìä **Total:** ${TOTAL_TESTS}\n\n**Status:** ${STATUS}\n\n${ADDITIONAL_TEXT}\n\n## üìä Detailed Reports\n\n- üéØ **[View Allure Report](${ALLURE_URL})** - Interactive test report with detailed analytics\n- üìÅ **[Download Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Raw test results and logs\n\n<details>\n<summary>üîç View JUnit XML summary</summary>\n\n\`\`\`xml\n$(cat test-results.xml | head -20 | sed 's/"/\\"/g')\n\`\`\`\n\n</details>"
          }
          EOF
            
            # Post comment using GitHub API
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/${{ github.event.number }}/comments" \
              -d @comment-payload.json
              
            echo "Posted test results comment with Allure link to PR #${{ github.event.number }}"
            echo "Allure report will be available at: ${ALLURE_URL}"
          else
            echo "No test results file found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Delete Neon Branch
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}