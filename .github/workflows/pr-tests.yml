name: PR Database Tests

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  pages: write
  id-token: write

jobs:
  test:
    name: Run pgTAP Data Integrity Tests
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client postgresql-contrib
          
          # Install Allure CLI
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure

      - name: Install Python dependencies for TAP conversion
        run: |
          python -m pip install --upgrade pip
          # Install minimal dependencies for TAP to Allure conversion
          pip install psycopg2-binary

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run database migrations with pgTAP
        run: |
          # Apply the schema including pgTAP extension to the Neon branch database
          echo "üîß Applying database schema with pgTAP support..."
          psql "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" -f schema.sql
          
          # Verify pgTAP extension is available
          echo "‚úÖ Verifying pgTAP installation..."
          psql "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" -c "SELECT 'pgTAP Version: ' || extversion FROM pg_extension WHERE extname = 'pgtap';"

      - name: Load test data
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          # Load test data using the load_data.sh script
          echo "üîÑ Loading test data into Neon database..."
          ./load_data.sh
          echo "‚úÖ Test data loaded successfully"

      - name: Run pgTAP Data Integrity Tests
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          echo "üß™ Running pgTAP data integrity tests..."
          
          # Create allure-results directory
          mkdir -p allure-results
          
          # Run pgTAP tests and capture TAP output
          echo "üìã Executing pgTAP test suite..."
          psql "$DATABASE_URL" -f tests/test_runner_ci.sql > tap_output.txt 2>&1
          
          # Show TAP output for debugging
          echo "üìä TAP Test Output:"
          echo "=================="
          cat tap_output.txt
          echo "=================="
          
          # Convert TAP output to Allure format
          echo "üîÑ Converting TAP output to Allure format..."
          python tests/tap_to_allure.py tap_output.txt --output-dir allure-results
          
          # Create JUnit XML for GitHub test reporting compatibility
          echo "üìù Generating JUnit XML for GitHub integration..."
          python tests/tap_to_junit.py tap_output.txt test-results.xml
          
          echo "‚úÖ pgTAP tests completed successfully"

      - name: Download previous Allure history
        if: always()
        continue-on-error: true
        run: |
          # Create allure-results directory if it doesn't exist
          mkdir -p allure-results
          
          # Try to download previous Allure history from GitHub Pages
          echo "üîç Checking for previous test history..."
          
          # Download the previous allure report to extract history
          if curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/history.json" -o /tmp/history.json; then
            echo "‚úÖ Found previous history.json"
            mkdir -p allure-results/history
            
            # Download all history files
            curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/history.json" -o allure-results/history/history.json || true
            curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/history-trend.json" -o allure-results/history/history-trend.json || true
            curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/duration-trend.json" -o allure-results/history/duration-trend.json || true
            curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/retry-trend.json" -o allure-results/history/retry-trend.json || true
            curl -f -s "https://demithras.github.io/tv-show-intervals-demo/pr-${{ github.event.number }}/history/categories-trend.json" -o allure-results/history/categories-trend.json || true
            
            echo "‚úÖ Previous test history restored"
            ls -la allure-results/history/ || true
          else
            echo "‚ÑπÔ∏è No previous history found - this will be the first run for trend analysis"
          fi

      - name: Generate Allure Report with History
        if: always()
        run: |
          # Generate Allure HTML report with history (don't use --clean to preserve history)
          echo "üìä Generating Allure report with test-level history..."
          allure generate allure-results -o allure-report
          
          # Verify history was properly integrated
          if [ -f "allure-report/history/history.json" ]; then
            echo "‚úÖ Test history successfully integrated into report"
            echo "üìà History file size: $(wc -c < allure-report/history/history.json) bytes"
          else
            echo "‚ÑπÔ∏è No history file in generated report (first run)"
          fi
          
          # Add environment information with more details
          cat > allure-report/environment.properties << EOF
          Database.Host=${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          Python.Version=3.11
          Test.Framework=pgTAP
          Test.Type=Data Integrity
          CI.Provider=GitHub Actions
          PR.Number=${{ github.event.number }}
          Branch.Name=${{ github.head_ref }}
          Commit.SHA=${{ github.sha }}
          Run.Number=${{ github.run_number }}
          Run.Attempt=${{ github.run_attempt }}
          Timestamp=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
          
          # Add test execution metadata for better history tracking
          if [ -f "allure-report/widgets/summary.json" ]; then
            echo "üìä Test summary available for trend analysis"
          fi
          
          echo "‚úÖ Allure report generated with per-test history tracking"

      - name: Upload Allure Results with History
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-pr-${{ github.event.number }}-run-${{ github.run_number }}
          path: allure-results/
          retention-days: 30

      - name: Upload Allure Report with History
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-pr-${{ github.event.number }}-run-${{ github.run_number }}
          path: allure-report/
          retention-days: 30

      - name: Deploy Allure Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: pr-${{ github.event.number }}
          keep_files: true
          force_orphan: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy Allure report for PR #${{ github.event.number }} (Run #${{ github.run_number }})'

      - name: Generate Global History Report
        if: always() && github.event.action != 'closed'
        run: |
          # Use the dedicated script to generate a comprehensive global index
          echo "üöÄ Generating comprehensive global index page..."
          
          ./generate-global-index.sh \
            "${{ github.repository_owner }}" \
            "${{ github.event.repository.name }}" \
            "${{ github.event.number }}" \
            "${{ github.run_number }}" \
            "${{ github.head_ref }}" \
            "${{ secrets.GITHUB_TOKEN }}"

      - name: Deploy Global History Index
        if: always() && github.event.action != 'closed'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./global-history
          destination_dir: .
          keep_files: true
          force_orphan: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update global test history index'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-pr-${{ github.event.number }}
          path: test-results.xml

      - name: Comment test results on PR
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: pgTAP Test Results (Run #${{ github.run_number }})
          path: test-results.xml
          reporter: java-junit
          fail-on-error: false

      - name: Parse and comment test results with Allure link
        if: always()
        run: |
          echo "üîç Starting test results parsing and comment generation..."
          
          # Initialize variables with defaults
          TOTAL_TESTS=0
          FAILURES=0
          ERRORS=0
          PASSED=0
          
          if [ -f test-results.xml ]; then
            echo "‚úÖ Found test-results.xml, parsing..."
            
            # Extract test summary from JUnit XML with better error handling
            TOTAL_TESTS=$(grep -o 'tests="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            FAILURES=$(grep -o 'failures="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            ERRORS=$(grep -o 'errors="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            
            # Ensure all values are numeric
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            
            PASSED=$((TOTAL_TESTS - FAILURES - ERRORS))
            
            echo "üìä Test summary: Total=$TOTAL_TESTS, Passed=$PASSED, Failed=$FAILURES, Errors=$ERRORS"
          else
            echo "‚ö†Ô∏è No test-results.xml found - using default values"
          fi
          
          # Determine status and appropriate messaging
          if [ $FAILURES -gt 0 ] || [ $ERRORS -gt 0 ]; then
            STATUS="‚ùå Tests failed"
            STATUS_EMOJI="‚ùå"
            ADDITIONAL_TEXT="**‚ö†Ô∏è Some tests are failing** - Check the detailed report below for more information."
          else
            STATUS="‚úÖ All tests passed"
            STATUS_EMOJI="‚úÖ"
            ADDITIONAL_TEXT="**üéâ Great job!** All tests are passing successfully."
          fi
          
          # GitHub Pages URLs
          ALLURE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
          HISTORY_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          
          echo "üîó Allure report URL: $ALLURE_URL"
          
          # Create comment body content using here document
          cat > comment-body.txt << 'EOF'
          ## üß™ pgTAP Test Results (Run #${{ github.run_number }})
          
          ${STATUS_EMOJI} **Status:** ${STATUS}
          
          ### üìä Test Summary
          
          | Result | Count |
          |--------|-------|
          | ‚úÖ Passed | ${PASSED} |
          | ‚ùå Failed | ${FAILURES} |
          | üî• Errors | ${ERRORS} |
          | üìä **Total** | **${TOTAL_TESTS}** |
          
          ${ADDITIONAL_TEXT}
          
          ### üìä Interactive Reports
          
          - üéØ **[View Latest Allure Report](${ALLURE_URL})** - Full test results with history trends
          - üìà **[Browse All Test History](${HISTORY_URL})** - Historical reports across all PRs
          - üìÅ **[Download Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Raw results and logs
          
          ### üìà Available Report Features
          
          - **üîÑ Trends**: Performance and stability over time
          - **üîÅ Retries**: Flaky test detection and analysis  
          - **‚è±Ô∏è Duration**: Execution time trends and bottlenecks
          - **üìÇ Categories**: Failure pattern analysis
          - **üìé Attachments**: Database queries, program data, and debug info
          
          ---
          *ü§ñ Automated comment generated by GitHub Actions ‚Ä¢ Run #${{ github.run_number }} ‚Ä¢ $(date -u "+%Y-%m-%d %H:%M UTC")*
          EOF
          
          # Substitute variables in the comment body
          COMMENT_BODY=$(envsubst < comment-body.txt)
          
          # Create JSON payload with properly escaped content
          jq -n --arg body "$COMMENT_BODY" '{body: $body}' > comment-payload.json
          
          echo "üìù Generated comment payload"
          
          # Post comment using GitHub API with improved error handling
          echo "üöÄ Posting comment to PR #${{ github.event.number }}..."
          
          HTTP_STATUS=$(curl -w "%{http_code}" -s -o response.json \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/${{ github.event.number }}/comments" \
            -d @comment-payload.json)
          
          echo "üì° HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 201 ]; then
            echo "‚úÖ Successfully posted test results comment to PR #${{ github.event.number }}"
            echo "üîó Allure report will be available at: ${ALLURE_URL}"
          else
            echo "‚ùå Failed to post comment. HTTP Status: $HTTP_STATUS"
            echo "üìÑ Response:"
            cat response.json || echo "No response file found"
            
            # Try to extract error message
            if [ -f response.json ]; then
              ERROR_MSG=$(grep -o '"message":"[^"]*"' response.json | cut -d'"' -f4 || echo "Unknown error")
              echo "üö® Error message: $ERROR_MSG"
            fi
            
            # Don't fail the entire job - just log the error
            echo "‚ö†Ô∏è Comment posting failed, but continuing workflow..."
          fi
          
          # Clean up
          rm -f comment-payload.json response.json || true
          
          echo "üèÅ Test results parsing and comment generation completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback comment if previous steps failed
        if: always()
        continue-on-error: true
        run: |
          echo "üîÑ Running fallback comment check..."
          
          # Check if we should post a fallback comment
          # This will only run if the main comment step somehow failed
          
          # Get workflow status
          WORKFLOW_STATUS="${{ job.status }}"
          
          # GitHub Pages URLs
          ALLURE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}"
          HISTORY_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          
          # Create fallback comment using here document
          cat > fallback-body.txt << 'EOF'
          ## üß™ pgTAP Test Results (Run #${{ github.run_number }}) - Fallback Report
          
          ‚ö†Ô∏è **Unable to parse detailed test results**, but the test execution completed.
          
          **Workflow Status:** ${WORKFLOW_STATUS}
          
          ### üìä Available Reports
          
          - üéØ **[View Allure Report](${ALLURE_URL})** - Full test results with detailed information
          - üìà **[Browse Test History](${HISTORY_URL})** - Historical reports across all PRs
          - üìÅ **[Download Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Raw results and logs
          
          ### üîç What to check
          
          1. **Allure Report**: Click the link above for the most complete test results
          2. **Workflow Logs**: Check the [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed execution information
          3. **Test Artifacts**: Download the test results and reports from the artifacts section
          
          ---
          *ü§ñ Fallback comment generated by GitHub Actions ‚Ä¢ Run #${{ github.run_number }} ‚Ä¢ $(date -u "+%Y-%m-%d %H:%M UTC")*
          EOF
          
          # Substitute variables and create JSON
          FALLBACK_BODY=$(envsubst < fallback-body.txt)
          jq -n --arg body "$FALLBACK_BODY" '{body: $body}' > fallback-comment.json
          
          echo "üìù Posting fallback comment as backup..."
          
          # Only post fallback if no recent comment exists
            RECENT_COMMENTS=$(curl -s \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/${{ github.event.number }}/comments?per_page=5" | \
            grep -c "pgTAP Test Results (Run #${{ github.run_number }})" || echo "0")          if [ "$RECENT_COMMENTS" -eq 0 ]; then
            echo "üì§ No recent test result comment found, posting fallback..."
            curl -s \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/${{ github.event.number }}/comments" \
              -d @fallback-comment.json > /dev/null
            echo "‚úÖ Fallback comment posted"
          else
            echo "‚úÖ Main test comment already posted, skipping fallback"
          fi
          
          rm -f fallback-comment.json || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Delete Neon Branch
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}