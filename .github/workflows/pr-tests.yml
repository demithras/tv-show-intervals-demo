name: PR Database Tests

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  test:
    name: Run BDD Tests
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Run database migrations
        run: |
          # Apply the schema to the Neon branch database using the full connection URL
          psql "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" -f schema.sql

      - name: Run BDD tests
        env:
          # Use the full database URL for Python connection
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          # Run pytest with BDD tests
          pytest -v --tb=short --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-pr-${{ github.event.number }}
          path: test-results.xml

      - name: Comment test results on PR
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: BDD Test Results
          path: test-results.xml
          reporter: java-junit

      - name: Parse and comment test results (fallback)
        if: always()
        run: |
          if [ -f test-results.xml ]; then
            # Extract test summary from JUnit XML
            TOTAL_TESTS=$(grep -o 'tests="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            FAILURES=$(grep -o 'failures="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            ERRORS=$(grep -o 'errors="[^"]*"' test-results.xml | grep -o '[0-9]*' | head -1)
            
            # Set defaults if not found
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            
            PASSED=$((TOTAL_TESTS - FAILURES - ERRORS))
            
            # Create comment body
            cat > test-comment.md << EOF
          ## üß™ BDD Test Results
          
          **Summary:**
          - ‚úÖ **Passed:** ${PASSED}
          - ‚ùå **Failed:** ${FAILURES}
          - üî• **Errors:** ${ERRORS}
          - üìä **Total:** ${TOTAL_TESTS}
          
          $(if [ $FAILURES -gt 0 ] || [ $ERRORS -gt 0 ]; then
            echo "**Status:** ‚ùå Tests failed"
            echo ""
            echo "Some tests are failing. This might be expected if testing the CI/CD pipeline with intentional failures."
          else
            echo "**Status:** ‚úÖ All tests passed"
          fi)
          
          <details>
          <summary>üîç View detailed results</summary>
          
          \`\`\`
          $(cat test-results.xml | head -50)
          \`\`\`
          
          </details>
          EOF
            
            # Comment on PR using GitHub CLI if available, or skip
            if command -v gh &> /dev/null; then
              gh pr comment --body-file test-comment.md
            else
              echo "GitHub CLI not available, skipping PR comment"
              echo "Test results summary:"
              cat test-comment.md
            fi
          else
            echo "No test results file found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Delete Neon Branch
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}
          api_key: ${{ secrets.NEON_API_KEY }}