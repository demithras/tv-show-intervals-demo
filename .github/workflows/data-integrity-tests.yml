name: Data Integrity Tests

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
    paths:
      - 'data_integrity.py'
      - 'data_loader.py'
      - 'upload_corrupted_data.sh'
      - 'test_data_integrity_validation.py'
      - 'features/data_integrity_validation.feature'
      - 'data/**'
      - 'schema.sql'
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Custom branch name for Neon database'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  pages: write
  id-token: write

jobs:
  data-integrity-tests:
    name: Run Data Integrity Validation Tests
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Install Allure CLI
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          sudo tar -zxvf allure-2.24.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set branch name for Neon
        id: set_branch_name
        run: |
          if [ "${{ github.event.inputs.branch_name }}" != "" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch_name }}"
          else
            BRANCH_NAME="data-integrity/pr-${{ github.event.number }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using Neon branch: $BRANCH_NAME"

      - name: Create Neon Branch for Data Integrity Testing
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch_name: ${{ steps.set_branch_name.outputs.branch_name }}
          api_key: ${{ secrets.NEON_API_KEY }}

      - name: Apply database schema
        run: |
          echo "üóÑÔ∏è Applying database schema to Neon branch..."
          psql "${{ steps.create_neon_branch.outputs.db_url_with_pooler }}" -f schema.sql
          echo "‚úÖ Schema applied successfully"

      - name: Upload corrupted data for integrity testing
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          echo "üí• Uploading corrupted data to create known integrity issues..."
          ./upload_corrupted_data.sh
          echo "‚úÖ Corrupted data uploaded successfully"

      - name: Verify data corruption state
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          echo "üîç Verifying database contains expected corruption..."
          
          # Quick integrity check to ensure corruption was created
          ORPHANED_INTERVALS=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM program_intervals pi LEFT JOIN programs p ON pi.program_name = p.program_name WHERE p.program_name IS NULL;" | xargs)
          MISSING_INTERVALS=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM programs p LEFT JOIN program_intervals pi ON p.program_name = pi.program_name WHERE pi.program_name IS NULL;" | xargs)
          OVERLAPPING_PROGRAMS=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM programs p1 JOIN programs p2 ON p1.id < p2.id WHERE p1.start_time < p2.end_time AND p1.end_time > p2.start_time AND NOT (p1.start_time > p1.end_time OR p2.start_time > p2.end_time);" | xargs)
          DUPLICATE_NAMES=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM (SELECT program_name FROM programs GROUP BY program_name HAVING COUNT(*) > 1) AS dups;" | xargs)
          
          echo "üìä Corruption verification results:"
          echo "   Orphaned intervals: $ORPHANED_INTERVALS"
          echo "   Missing intervals: $MISSING_INTERVALS"  
          echo "   Overlapping programs: $OVERLAPPING_PROGRAMS"
          echo "   Duplicate names: $DUPLICATE_NAMES"
          
          if [ "$ORPHANED_INTERVALS" -eq 0 ] && [ "$MISSING_INTERVALS" -eq 0 ] && [ "$OVERLAPPING_PROGRAMS" -eq 0 ] && [ "$DUPLICATE_NAMES" -eq 0 ]; then
            echo "‚ùå ERROR: No data corruption detected! Data integrity tests require corrupted data."
            exit 1
          else
            echo "‚úÖ Data corruption successfully verified - ready for integrity testing"
          fi

      - name: Run Data Integrity Validation Tests
        env:
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
        run: |
          echo "üß™ Running BDD data integrity validation tests..."
          
          # Run only data integrity tests
          pytest test_data_integrity_validation.py -v --tb=short \
            --junitxml=data-integrity-results.xml \
            --alluredir=allure-results \
            --allure-link-pattern=issue:https://github.com/${{ github.repository }}/issues/{} \
            --allure-link-pattern=test_case:https://github.com/${{ github.repository }}/blob/${{ github.sha }}/features/{} \
            -k "data_integrity"
          
          echo "‚úÖ Data integrity tests completed"

      - name: Download previous Allure history for integrity tests
        if: always()
        continue-on-error: true
        run: |
          mkdir -p allure-results
          
          echo "üîç Checking for previous data integrity test history..."
          
          # Use a separate path for data integrity reports
          if curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/history.json" -o /tmp/integrity-history.json; then
            echo "‚úÖ Found previous data integrity history"
            mkdir -p allure-results/history
            
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/history.json" -o allure-results/history/history.json || true
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/history-trend.json" -o allure-results/history/history-trend.json || true
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/duration-trend.json" -o allure-results/history/duration-trend.json || true
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/retry-trend.json" -o allure-results/history/retry-trend.json || true
            curl -f -s "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}/history/categories-trend.json" -o allure-results/history/categories-trend.json || true
            
            echo "‚úÖ Previous data integrity test history restored"
          else
            echo "‚ÑπÔ∏è No previous data integrity history found - first run"
          fi

      - name: Generate Data Integrity Allure Report
        if: always()
        run: |
          echo "üìä Generating Data Integrity Allure report..."
          allure generate allure-results -o allure-report
          
          # Add environment information specific to data integrity testing
          cat > allure-report/environment.properties << EOF
          Test.Type=Data Integrity Validation
          Database.Host=${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
          Database.Branch=${{ steps.set_branch_name.outputs.branch_name }}
          Python.Version=3.11
          Test.Framework=pytest-bdd
          CI.Provider=GitHub Actions
          PR.Number=${{ github.event.number }}
          Branch.Name=${{ github.head_ref }}
          Commit.SHA=${{ github.sha }}
          Run.Number=${{ github.run_number }}
          Run.Attempt=${{ github.run_attempt }}
          Timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Repository=${{ github.repository }}
          Test.Purpose=Validate data integrity issues in pre-populated corrupted database
          EOF
          
          echo "‚úÖ Data integrity Allure report generated"

      - name: Upload Data Integrity Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: data-integrity-results-pr-${{ github.event.number }}-run-${{ github.run_number }}
          path: allure-results/
          retention-days: 30

      - name: Upload Data Integrity Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: data-integrity-report-pr-${{ github.event.number }}-run-${{ github.run_number }}
          path: allure-report/
          retention-days: 30

      - name: Deploy Data Integrity Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: data-integrity-pr-${{ github.event.number }}
          keep_files: true
          force_orphan: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy Data Integrity Allure report for PR #${{ github.event.number }} (Run #${{ github.run_number }})'

      - name: Comment Data Integrity test results on PR
        if: always()
        run: |
          echo "üîç Analyzing data integrity test results..."
          
          # Initialize variables
          TOTAL_TESTS=0
          FAILURES=0
          ERRORS=0
          PASSED=0
          
          if [ -f data-integrity-results.xml ]; then
            echo "‚úÖ Found data integrity test results"
            
            TOTAL_TESTS=$(grep -o 'tests="[^"]*"' data-integrity-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            FAILURES=$(grep -o 'failures="[^"]*"' data-integrity-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            ERRORS=$(grep -o 'errors="[^"]*"' data-integrity-results.xml | grep -o '[0-9]*' | head -1 || echo "0")
            
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            PASSED=$((TOTAL_TESTS - FAILURES - ERRORS))
            
            echo "üìä Data integrity test summary: Total=$TOTAL_TESTS, Passed=$PASSED, Failed=$FAILURES, Errors=$ERRORS"
          else
            echo "‚ö†Ô∏è No data integrity test results found"
          fi
          
          # For data integrity tests, we expect validation to PASS (meaning corruption is detected correctly)
          if [ $FAILURES -eq 0 ] && [ $ERRORS -eq 0 ] && [ $TOTAL_TESTS -gt 0 ]; then
            STATUS="‚úÖ Data integrity validation working correctly"
            STATUS_EMOJI="‚úÖ"
            ADDITIONAL_TEXT="**üéâ Excellent!** All data integrity validation tests passed, meaning the system correctly detected the expected data corruption issues."
          elif [ $TOTAL_TESTS -eq 0 ]; then
            STATUS="‚ö†Ô∏è No data integrity tests found"
            STATUS_EMOJI="‚ö†Ô∏è"
            ADDITIONAL_TEXT="**‚ö†Ô∏è Warning:** No data integrity tests were executed. Please check the test configuration."
          else
            STATUS="‚ùå Data integrity validation issues"
            STATUS_EMOJI="‚ùå"
            ADDITIONAL_TEXT="**‚ö†Ô∏è Issues detected:** Some data integrity validation tests failed. This may indicate problems with the validation logic itself."
          fi
          
          # GitHub Pages URLs
          INTEGRITY_REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/data-integrity-pr-${{ github.event.number }}"
          
          # Create comment payload
          cat > integrity-comment.json << EOF
          {
            "body": "## üîç Data Integrity Validation Results (Run #${{ github.run_number }})\n\n${STATUS_EMOJI} **Status:** ${STATUS}\n\n### üìä Test Summary\n\n| Result | Count |\n|--------|-------|\n| ‚úÖ Passed | ${PASSED} |\n| ‚ùå Failed | ${FAILURES} |\n| üî• Errors | ${ERRORS} |\n| üìä **Total** | **${TOTAL_TESTS}** |\n\n${ADDITIONAL_TEXT}\n\n### üéØ What This Tests\n\nThis workflow validates that our data integrity detection system correctly identifies known corruption issues:\n\n- **Orphaned Intervals**: Intervals without corresponding programs\n- **Missing Intervals**: Programs without interval records  \n- **Overlapping Schedules**: Programs with conflicting time slots\n- **Duplicate Names**: Multiple programs with identical names\n- **Calculation Errors**: Incorrect interval calculations\n- **Business Rule Violations**: Suspicious patterns and edge cases\n\n### üìä Detailed Reports\n\n- üéØ **[View Data Integrity Report](${INTEGRITY_REPORT_URL})** - Comprehensive validation results\n- üìÅ **[Download Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Raw results and logs\n\n### üîß Database Details\n\n- **Neon Branch**: \`${{ steps.set_branch_name.outputs.branch_name }}\`\n- **Test Database**: Pre-populated with known corruption for validation\n- **Validation Scope**: Static analysis of existing data integrity issues\n\n---\n*ü§ñ Data Integrity validation by GitHub Actions ‚Ä¢ Run #${{ github.run_number }} ‚Ä¢ $(date -u +\"%Y-%m-%d %H:%M UTC\")*"
          }
          EOF
          
          echo "üìù Posting data integrity test results comment..."
          
          HTTP_STATUS=$(curl -w "%{http_code}" -s -o response.json \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/${{ github.event.number }}/comments" \
            -d @integrity-comment.json)
          
          if [ "$HTTP_STATUS" -eq 201 ]; then
            echo "‚úÖ Successfully posted data integrity test results to PR #${{ github.event.number }}"
            echo "üîó Report available at: ${INTEGRITY_REPORT_URL}"
          else
            echo "‚ùå Failed to post comment (HTTP $HTTP_STATUS)"
            cat response.json || echo "No response details"
          fi
          
          rm -f integrity-comment.json response.json || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-integrity:
    name: Delete Data Integrity Neon Branch
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Set branch name for cleanup
        id: set_branch_name
        run: |
          BRANCH_NAME="data-integrity/pr-${{ github.event.number }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Cleaning up Neon branch: $BRANCH_NAME"

      - name: Delete Data Integrity Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ vars.NEON_PROJECT_ID }}
          branch: ${{ steps.set_branch_name.outputs.branch_name }}
          api_key: ${{ secrets.NEON_API_KEY }}